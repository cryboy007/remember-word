<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.3.5.RELEASE</version>
    <relativePath/> <!-- lookup parent from repository -->
  </parent>

  <groupId>com.tao</groupId>
  <artifactId>remember-word</artifactId>
  <version>1.0-SNAPSHOT</version>
  <name>remember-word</name>
  <description>词根词缀记单词</description>

  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
      <docker.image.prefix>hetao/remember</docker.image.prefix>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>
    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <optional>true</optional>
    </dependency>
    <dependency>
      <groupId>com.baomidou</groupId>
      <artifactId>mybatis-plus-boot-starter</artifactId>
      <version>3.4.2</version>
    </dependency>
    <!--引入druid数据源-->
    <dependency>
      <groupId>com.alibaba</groupId>
      <artifactId>druid</artifactId>
      <version>1.1.21</version>
    </dependency>

    <!-- https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient -->
    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpclient</artifactId>
      <version>4.5.13</version>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-configuration-processor</artifactId>
      <optional>true</optional>
    </dependency>
    <!-- 多数据源-->
    <dependency>
      <groupId>com.baomidou</groupId>
      <artifactId>dynamic-datasource-spring-boot-starter</artifactId>
      <version>3.3.1</version>
    </dependency>
    <dependency>
      <groupId>org.thymeleaf</groupId>
      <artifactId>thymeleaf-spring5</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-thymeleaf</artifactId>
    </dependency>
      <dependency>
          <groupId>com.rover12421</groupId>
          <artifactId>fastjson</artifactId>
          <version>1.2.47</version>
      </dependency>
  </dependencies>

  <build>
      <plugins>
          <plugin>
              <groupId>org.springframework.boot</groupId>
              <artifactId>spring-boot-maven-plugin</artifactId>
          </plugin>
          <plugin>
              <groupId>com.spotify</groupId>
              <artifactId>docker-maven-plugin</artifactId>
              <version>1.2.2</version>
              <executions>
                  <!--执行 maven package时 执行:maven clean package docker:build-->
                  <execution>
                      <id>build-image</id>
                      <phase>package</phase>
                      <goals>
                          <goal>build</goal>
                      </goals>
                  </execution>
              </executions>
              <configuration> <!--相当于创建Dockerfile-->
                  <!--镜像名称 (xiexie/test) project.artifactId表示项目名称-->
                  <imageName>${docker.image.prefix}</imageName>
                  <!--指定标签Tag 镜像版本-->
                  <imageTags>
                      <!--<imageTag>${project.version}</imageTag>-->
                      <imageTag>latest</imageTag>
                  </imageTags>
                  <!--基础镜像jdk 1.8-->
                  <baseImage>tomcat</baseImage>
                  <!--制作者的信息-->
                  <maintainer>hetao</maintainer>
                  <!--切换到工作目录-->
                  <workdir>/ROOT</workdir>
                  <runs>
                      <run>/bin/cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; echo 'Asia/Shanghai' >/etc/timezone </run>
                  </runs>
                  <!--<cmd>["java","-version"]</cmd>-->
                  <!--project.build.finalName会取springboot打包后target目录下的jar名称-->
                  <entryPoint>["java","-jar","${project.build.finalName}.jar","-Xms256m -Xmx256m -Dfile.encoding=utf-8 -Djava.security.egd=file:/dev/./urandom -Dsun.jnu.encoding=UTF8 -Duser.timezone=Asia/Shanghai"]</entryPoint>

                  <!--指定Dockerfile路径
                       <dockerDirectory>${project.basedir}/src/main/docker</dockerDirectory>
                  -->
                  <!--指定远程docker api地址 如果使用的钥匙连接加s->https://117.78.2.26:2375-->
                  <dockerHost>https://znsd.top:2375</dockerHost>
                  <dockerCertPath>C:\Users\Hetao\Documents\临时文件\n1_tls</dockerCertPath>
                  <!--复制jar包到docker容器指定的目录配置-->
                  <resources>
                      <resource>
                          <targetPath>/ROOT</targetPath>
                          <!--用于指定需要复制的根目录,${project.build.directory}表示target目录-->
                          <directory>${project.build.directory}</directory>
                          <!--用于指定需要复制的文件,${project.build.finalName}.jar表示打包后的jar文件-->
                          <include>${project.build.finalName}.jar</include>
                      </resource>
                  </resources>
              </configuration>
          </plugin>
      </plugins>
  </build>
</project>
